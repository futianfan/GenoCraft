import pandas as pd
import re
import numpy as np
from quality_control import filter_low_counts
from impute import impute_missing_values
from Normalize import normalize_rnaseq_data
from Visualize import visualize
from differential_analysis import run_differential_analysis
from GSEA import run_gsea_analysis, save_stream_to_file
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.manifold import UMAP
from matplotlib_venn import venn2
import statsmodels.api as sm

def save_stream_to_file2(stream, filepath):
    with open(filepath, 'wb') as f:
        f.write(stream.read())

def plot_volcano(df_p_values):
    df_p_values['-log10(p-value)'] = -np.log10(df_p_values['p-value'])
    plt.figure(figsize=(10, 7))
    sns.scatterplot(x='Fold Change', y='-log10(p-value)', data=df_p_values, hue=(df_p_values['p-value'] < 0.2), palette=['grey', 'red'])
    plt.title("Volcano Plot")
    plt.xlabel("Fold Change")
    plt.ylabel("-log10(p-value)")
    plt.show()

def plot_mean_difference(df_cases, df_controls):
    mean_case = df_cases.mean(axis=1)
    mean_control = df_controls.mean(axis=1)
    plt.figure(figsize=(10, 7))
    sns.scatterplot(x=mean_case, y=mean_control)
    plt.title("Mean Difference Plot")
    plt.xlabel("Mean Case")
    plt.ylabel("Mean Control")
    plt.plot([min(mean_case.min(), mean_control.min()), max(mean_case.max(), mean_control.max())],
             [min(mean_case.min(), mean_control.min()), max(mean_case.max(), mean_control.max())], 'r--')
    plt.show()

def plot_umap(df_cases, df_controls):
    combined_df = pd.concat([df_cases, df_controls], axis=1).T
    umap_model = UMAP(n_neighbors=15, min_dist=0.1, n_components=2, random_state=42)
    umap_embedding = umap_model.fit_transform(combined_df)
    plt.figure(figsize=(10, 7))
    plt.scatter(umap_embedding[:df_cases.shape[1], 0], umap_embedding[:df_cases.shape[1], 1], label='Cases', alpha=0.7)
    plt.scatter(umap_embedding[df_cases.shape[1]:, 0], umap_embedding[df_cases.shape[1]:, 1], label='Controls', alpha=0.7)
    plt.title("UMAP Plot")
    plt.legend()
    plt.show()

def plot_venn(case_genes, control_genes):
    plt.figure(figsize=(7, 7))
    venn2([set(case_genes), set(control_genes)], ('Case Genes', 'Control Genes'))
    plt.title("Venn Diagram of Genes")
    plt.show()

def plot_expression_density(df_cases, df_controls):
    plt.figure(figsize=(10, 7))
    sns.kdeplot(df_cases.values.flatten(), label='Cases', shade=True)
    sns.kdeplot(df_controls.values.flatten(), label='Controls', shade=True)
    plt.title("Expression Density Plot")
    plt.xlabel("Expression Level")
    plt.ylabel("Density")
    plt.legend()
    plt.show()

def plot_boxplot(df_cases, df_controls):
    combined_df = pd.concat([df_cases.melt(value_name='Expression', var_name='Sample'), 
                             df_controls.melt(value_name='Expression', var_name='Sample')], axis=0)
    plt.figure(figsize=(10, 7))
    sns.boxplot(x='Sample', y='Expression', data=combined_df)
    plt.title("Expression Boxplot")
    plt.show()

def plot_pvalue_histogram(df_p_values):
    plt.figure(figsize=(10, 7))
    sns.histplot(df_p_values['p-value'], bins=50)
    plt.title("P-value Histogram")
    plt.xlabel("P-value")
    plt.ylabel("Frequency")
    plt.show()

def plot_qqplot(df_p_values):
    sm.qqplot(df_p_values['p-value'], line='45')
    plt.title("QQ Plot of p-values")
    plt.show()

def plot_mean_variance_trend(df_cases, df_controls):
    mean_expression = pd.concat([df_cases.mean(axis=1), df_controls.mean(axis=1)], axis=0)
    variance_expression = pd.concat([df_cases.var(axis=1), df_controls.var(axis=1)], axis=0)
    plt.figure(figsize=(10, 7))
    sns.scatterplot(x=mean_expression, y=variance_expression)
    plt.title("Mean-Variance Trend")
    plt.xlabel("Mean Expression")
    plt.ylabel("Variance")
    plt.show()

if __name__ == '__main__':
    ### 1. Quality control 
    df = pd.read_csv('protein_expression.csv', sep=',', dtype={0: str})
    df = df.set_index(df.columns[0], drop=True)
    df_filtered = filter_low_counts(df)
    
    with open('sample_label.csv', 'r') as fin:
        lines = fin.readlines()
    labels = [int(line.strip().split(',')[1]) for line in lines]

    ### 1.5 Randomly generating case_samples and control_samples 
    patient_names = df.columns.tolist()
    print(patient_names, len(patient_names))
    case_samples = [patient for label, patient in zip(labels, patient_names) if label == 1]
    control_samples = [patient for label, patient in zip(labels, patient_names) if label == 0]
    print('case vs control:', case_samples, control_samples)
    
    ### 2. Missing data imputation
    df_imputed = impute_missing_values(df_filtered)
    df_imputed.to_csv('df_impute.csv')

    ### 3. Normalize 
    df, case_df_cpm, control_df_cpm = normalize_rnaseq_data(df_imputed, case_samples, control_samples)
    print('normalize', df.shape, case_df_cpm.shape, df, case_df_cpm)

    ### 4. Visualize 
    case_df_cpm = case_df_cpm[:1000]
    control_df_cpm = control_df_cpm[:1000]
    print(df, case_df_cpm, control_df_cpm)
    print(case_df_cpm.isna().sum())
    print(control_df_cpm.isna().sum())
    
    stream = visualize(case_df_cpm, control_df_cpm) 
    save_stream_to_file2(stream, 'figure/clustering.png')

    ### 5. Differential analysis 
    genename_list_short = df.index.tolist()
    significant_genes, significant_cases, significant_controls, df_p_values = run_differential_analysis(genename_list_short, case_df_cpm, control_df_cpm)
    
    significant_genes_list = significant_genes.columns.tolist()[0]
    significant_genes = significant_genes[significant_genes_list].tolist() 
    print('significant \n', significant_genes, len(significant_genes), type(significant_genes))
    
    with open('significant_gene.txt', 'w') as fout:
        for gene in significant_genes:
            fout.write(gene + '\n')

    ### 6. GSEA 
    gene_names_file = 'significant_gene.txt'
    stream = run_gsea_analysis(gene_names_file, 'pathway_with_pvalues.csv')
    save_stream_to_file2(stream, 'figure/gsea.png')
    
    ### 7. Additional Visualizations
    # Volcano Plot
    plot_volcano(df_p_values)
    
    # Mean Difference Plot
    plot_mean_difference(case_df_cpm, control_df_cpm)
    
    # UMAP Plot
    plot_umap(case_df_cpm, control_df_cpm)
    
    # Venn Diagram
    plot_venn(case_genes=significant_genes, control_genes=genename_list_short)
    
    # Expression Density Plot
    plot_expression_density(case_df_cpm, control_df_cpm)
    
    # Boxplot
    plot_boxplot(case_df_cpm, control_df_cpm)
    
    # P-value Histogram
    plot_pvalue_histogram(df_p_values)
    
    # QQ Plot
    plot_qqplot(df_p_values)
    
    # Mean-Variance Trend Plot
    plot_mean_variance_trend(case_df_cpm, control_df_cpm)
